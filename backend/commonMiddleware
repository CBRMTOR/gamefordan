require('dotenv').config();
const express = require('express');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
const path = require('path');
const fs = require('fs');
const multer = require('multer');
const mysql = require('mysql2/promise');

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 20,
  queueLimit: 0,
  charset: 'utf8mb4_unicode_ci'
});

async function query(sql, params, connection = null) {
  const client = connection || pool;
  try {
    const [rows] = await client.execute(sql, params);
    return rows;
  } catch (error) {
    console.error('Database error:', error);
    throw error;
  }
}

const corsOptions = {
  origin: process.env.ALLOWED_ORIGINS.split(','),
  methods: ['GET', 'POST', 'DELETE', 'PUT', 'PATCH'],
  credentials: true,
  allowedHeaders: ['Content-Type', 'X-CSRF-Token', 'Authorization']
};

const limiter = rateLimit({
  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS),
  max: parseInt(process.env.RATE_LIMIT_MAX),
  message: 'Too many requests from this IP, please try again later'
});

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = path.join(__dirname, process.env.UPLOAD_DIR);
    if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir, { recursive: true });
    
    const type = file.mimetype.split('/')[0];
    const subfolder = ['image', 'video', 'audio'].includes(type) ? `${type}s` : 'documents';
    const typeDir = path.join(uploadDir, subfolder);
    if (!fs.existsSync(typeDir)) fs.mkdirSync(typeDir, { recursive: true });
    
    cb(null, typeDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1E9)}`;
    const ext = path.extname(file.originalname).toLowerCase();
    cb(null, `${file.fieldname}-${uniqueSuffix}${ext}`);
  }
});

const fileFilter = (req, file, cb) => {
  const allowedTypes = [
    'image/jpeg', 'image/png', 'image/gif', 'image/webp',
    'video/mp4', 'video/quicktime', 'video/x-msvideo', 'video/webm',
    'audio/mpeg', 'audio/wav', 'audio/ogg',
    'application/pdf', 'application/msword', 
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
  ];
  
  if (allowedTypes.includes(file.mimetype)) {
    cb(null, true);
  } else {
    cb(new Error('Invalid file type. Only images, videos, audio, and documents are allowed.'), false);
  }
};

const upload = multer({ 
  storage: storage,
  fileFilter: fileFilter,
  limits: { 
    fileSize: parseInt(process.env.MAX_FILE_SIZE),
    files: parseInt(process.env.MAX_FILES)
  }
});

const cache = {};
const cacheMiddleware = (key, ttl = process.env.CACHE_TTL) => (req, res, next) => {
  const cacheKey = `${key}_${JSON.stringify(req.query)}`;
  if (cache[cacheKey] && Date.now() - cache[cacheKey].timestamp < ttl * 1000) {
    return res.json(cache[cacheKey].data);
  }
  res.sendResponse = res.json;
  res.json = (data) => {
    cache[cacheKey] = { data, timestamp: Date.now() };
    res.sendResponse(data);
  };
  next();
};

function setupCommonMiddleware(app) {
  app.use(helmet());
    app.use(cors(corsOptions));
    app.use(express.json({ limit: '10mb' }));
  app.use(express.urlencoded({ extended: true, limit: '10mb' }));
  
  app.use(compression());
    app.use(morgan('dev'));
  app.use('/api/', limiter);
  
  app.use('/uploads', express.static(path.join(__dirname, process.env.UPLOAD_DIR)));
  
  app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ 
      error: 'Internal Server Error',
      message: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  });
}

// Graceful shutdown
function setupGracefulShutdown(server) {
  process.on('SIGTERM', () => {
    console.log('SIGTERM received. Shutting down gracefully');
    server.close(() => {
      console.log('Server closed');
      pool.end(() => {
        console.log('Database connection pool closed');
        process.exit(0);
      });
    });
  });

  process.on('SIGINT', () => {
    console.log('SIGINT received. Shutting down gracefully');
    server.close(() => {
      console.log('Server closed');
      pool.end(() => {
        console.log('Database connection pool closed');
        process.exit(0);
      });
    });
  });
}

module.exports = {
  pool,
  query,
  corsOptions,
  limiter,
  upload,
  cacheMiddleware,
  setupCommonMiddleware,
  setupGracefulShutdown
};